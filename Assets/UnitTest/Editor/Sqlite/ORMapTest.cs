// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;

using Tenkafubu.Util;

using SharpUnit;

namespace Tenkafubu.Sqlite
{
	public class ORMapTest : TestCase
	{
		public ORMapTest ()
		{
		}

		[UnitTest]
		public void TestInsertAndGet(){
			var db = new DB("Temp/ORMapTest1.sqlite");
			var ope = db.GetOperation<MapObject>();

			ope.CreateTable();

			var d1 = new MapObject(0,23,"hoge",TimeUtil.FromUnixTime(10000),true,23.21f,0.25);
			ope.Insert(d1);
			Assert.True(d1.id > 0);
			var fromDb = ope.GetByPK(d1.id);

			AssertMapObj (d1,fromDb);


			ope.DropTable();
			db.Close();
		}

		private void AssertMapObj(MapObject expect,MapObject got){
			
			Assert.Equal(expect.id,got.id);
			Assert.Equal(expect.intField,got.intField);
			Assert.Equal(expect.strField,got.strField);
			Assert.Equal(expect.dateTimeField,got.dateTimeField);
			Assert.Equal(expect.boolField,got.boolField);
			Assert.Equal(expect.floatField,got.floatField);
			Assert.Equal(expect.doubleField,got.doubleField);
		}

		[UnitTest]
		public void TestUpdateOrInsert(){
			var db = new DB("Temp/ORMapTest2.sqlite");
			var ope = db.GetOperation<MapObject>();
			
			ope.CreateTable();
			
			var d1 = new MapObject(0,43792,"fuga",TimeUtil.FromUnixTime(67890),true,899.21f,0.125);
			ope.UpdateOrInsert(d1);
			Assert.True(d1.id > 0);
			AssertMapObj(d1,ope.GetByPK(d1.id));

			var oldId = d1.id;
			d1.strField = "437893290093";
			ope.UpdateOrInsert(d1);
			Assert.Equal(oldId,d1.id);
			AssertMapObj(d1,ope.GetByPK (d1.id));

			
			
			ope.DropTable();
			db.Close();
		}
	}


	public class MapObject{
		[Key(AutoIncrement = true)]
		public long id;
		public int intField;
		public string strField;
		public DateTime dateTimeField;
		public bool boolField;
		public float floatField;
		public double doubleField;

		public MapObject(){}

		public MapObject(long id,
		                 int intField,
		                 string strField,DateTime dateTimeField,bool boolField,
		                 float floatField,double doubleField){
			this.id = id;
			this.intField = intField;
			this.strField = strField;
			this.dateTimeField = dateTimeField;
			this.boolField = boolField;
			this.floatField = floatField;
			this.doubleField = doubleField;

		}
	}

}

