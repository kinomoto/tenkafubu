// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using System.Text;

using Tenkafubu.Concurrent;
using Tenkafubu.Json;
using Tenkafubu.Http;
using Tenkafubu.Util;

namespace Tenkafubu.Core
{
	public abstract class ObjectHttpClient
	{

		HttpClient client;
		Jsonizer jsonizer;

		public ObjectHttpClient (
			HttpClient client,
			Jsonizer jsonizer)
		{
			this.client = client;
			this.jsonizer = jsonizer;
		}

		
		public Future<T> Get<T>(string path){
			return Send <T>(HttpMethod.GET,path,null);
		}
		public Future<T> Get<T>(string path ,params string[] getParams){
			
			path = StringUtil.MakeUrl(path,getParams);
			return Send<T>(HttpMethod.GET,path,null);
		}

		public Future<T> Post<T>(string path){
			return Send<T>(HttpMethod.POST,path,null);
		}
		public Future<T> Post<T>(string path,object bodyObject){
			return Send<T>(HttpMethod.POST,path ,bodyObject);
		}
		public Future<T> Send<T>(HttpMethod method,string path,object bodyObject){

			byte[] data = null;
			if(bodyObject != null){
				var json = jsonizer.ToJson(bodyObject);
				data = Encoding.UTF8.GetBytes(json);
			}
			var f = client.Send(method,path,data);

			return f.Map<T>(ResponseMapFunc<T>);

		}
		private T ResponseMapFunc<T>(Response r) {
			var o = Jsonize.Deserialize(r.Text);
			var data = ExtractDataElement(o);
			return (T)jsonizer.FromJsonObject(typeof(T),data);
		}

		public abstract object ExtractDataElement(object responseBodyJsonObject);

	}
}

