// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using Tenkafubu.Concurrent;
using Tenkafubu.Util;
using Tenkafubu.Concurrent.Factory;

namespace Tenkafubu.Http
{
	public interface HttpClient
	{
		Future<Response> Get(string path);
		Future<Response> Get(string path ,params string[] getParams);
		Future<Response> Post(string path);
		Future<Response> Post(string path,byte[] body);
		Future<Response> Send(HttpMethod method,string path,byte[] body);
	}
	public enum HttpMethod{
		GET,
		POST,
		PUT,
		DELETE
	}

	public abstract class AbstractHttpClient : HttpClient{
		
		public Future<Response> Get(string path){
			return Send (HttpMethod.GET,path,null);
		}
		public Future<Response> Get(string path ,params string[] getParams){
			
			path = StringUtil.MakeUrl(path,getParams);
			return Send (HttpMethod.GET,path,null);
		}
		
		public Future<Response> Post(string path){
			return Send(HttpMethod.POST,path,null);
		}
		public Future<Response> Post(string path,byte[] body){
			return Send(HttpMethod.POST,path ,body);
		}

		public abstract Future<Response> Send(HttpMethod method,string path,byte[] body);

	}
	public class PlainHttpClient : AbstractHttpClient{
		protected string serverUrl;
		public string ServerUrl{
			get{return serverUrl;}
		}

		public PlainHttpClient(string serverUrl){
			this.serverUrl = serverUrl;
		}

		public override Future<Response> Send (HttpMethod method, string path, byte[] body)
		{
			
			var url = StringUtil.JoinUrlPath(serverUrl,path);
			
			var req = new Request(method.ToString(),url,body);

			ModifyRequest(req);
			
			var f = FutureFactory.NewFuture<Response>();
			req.OnFinish = r => {
				f.SetResult(r.response);
			};
			req.Send();
			return f;
		}
		
		protected virtual void ModifyRequest(Request req){
			// Plain client do nothing
		}
	}


}

