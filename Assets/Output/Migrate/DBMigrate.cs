// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;

using Tenkafubu.Sqlite;
using UnityEngine;

namespace Tenkafubu.Migrate
{
	public class DBMigrate
	{
		public HashMismatchAction hashMismatchAction = HashMismatchAction.RecreateTable;
		DB targetDb;

		public DBMigrate (DB targetDb)
		{
			this.targetDb = targetDb;
			targetDb.GetOperation<MigrateRecord>().CreateTable();
		}

		public void Migrate(string tableName,
		                    params string[] sqls){
			var record = targetDb.GetOperation<MigrateRecord>().GetByPK(tableName);
			if(record == null){
				record = new MigrateRecord();
				record.tableName = tableName;
				record.queryCount = 0;
				targetDb.GetOperation<MigrateRecord>().Insert(record);
			}else{
				string[] subarray = null;
				Array.Resize(ref subarray,record.queryCount);
				var sqlHash = GetHash(subarray);
				if(record.queryCount > 0 && record.sqlHash != sqlHash ){
					switch(hashMismatchAction){
					case HashMismatchAction.Ignore : {
						Debug.LogWarning("TableHash for " + tableName + " is not match");
						break;
					}
					case HashMismatchAction.ThrowException:{
						Debug.LogWarning("TableHash for " + tableName + " is not match");
						throw new Exception("TableHash for " + tableName + " is not match!");
					}
					case HashMismatchAction.RecreateTable : {
						Debug.Log("TableHash for " + tableName + " is not match.So recreate,");
						targetDb.Database.ExecuteNonQuery("DROP TABLE IF EXISTS " + tableName + ";");
						record.sqlHash = "";
						record.queryCount = 0;
						break;
					}
					}
				}
			}

			if(record.queryCount < sqls.Length){
				Debug.Log("Execute " + (sqls.Length - record.queryCount) + " migrate sqls");
				for(int i = record.queryCount;i < sqls.Length;i++){
					targetDb.Database.ExecuteNonQuery(sqls[i]);
				}
				record.sqlHash = GetHash(sqls);
				record.queryCount = sqls.Length;
				targetDb.GetOperation<MigrateRecord>().Update(record);
			}

		}
		
		string GetHash(string[] sqls){
			string join = string.Join("_",sqls);
			return join.GetHashCode().ToString();
		}

	}

	public enum HashMismatchAction{
		ThrowException,
		Ignore,
		RecreateTable
	}

	public class MigrateRecord{

		[Key]
		public string tableName;
		public int queryCount = 0;
		public string sqlHash = "";

	}
}

